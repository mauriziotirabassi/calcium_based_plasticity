"""
stdp - Synapse model for spike-timing dependent plasticity
#########################################################

Description
+++++++++++

stdp_synapse is a synapse with spike-timing dependent plasticity (as defined in [1]_). Here the weight dependence exponent can be set separately for potentiation and depression. Examples:

=================== ==== =============================
Multiplicative STDP [2]_ mu_plus = mu_minus = 1
Additive STDP       [3]_ mu_plus = mu_minus = 0
Guetig STDP         [1]_ mu_plus, mu_minus in [0, 1]
Van Rossum STDP     [4]_ mu_plus = 0 mu_minus = 1
=================== ==== =============================


References
++++++++++

.. [1] Guetig et al. (2003) Learning Input Correlations through Nonlinear
       Temporally Asymmetric Hebbian Plasticity. Journal of Neuroscience

.. [2] Rubin, J., Lee, D. and Sompolinsky, H. (2001). Equilibrium
       properties of temporally asymmetric Hebbian plasticity, PRL
       86,364-367

.. [3] Song, S., Miller, K. D. and Abbott, L. F. (2000). Competitive
       Hebbian learning through spike-timing-dependent synaptic
       plasticity,Nature Neuroscience 3:9,919--926

.. [4] van Rossum, M. C. W., Bi, G-Q and Turrigiano, G. G. (2000).
       Stable Hebbian learning from spike timing-dependent
       plasticity, Journal of Neuroscience, 20:23,8812--8821
"""
synapse stdp:
    state:
        w real = 1.    @nest::weight   # Synaptic weight
        
        p real=0.01        #inizialmente imposto p in modo da avere stesso peso di default (1/100)
        c_stel real=0.0        #inizialmente c* è zero
        Ca_in mM= Ca_0

    parameters:
        d ms = 1 ms  @nest::delay   # Synaptic transmission delay
        lambda real = .01
        tau_tr_pre ms = 20 ms
        tau_tr_post ms = 20 ms
        alpha real = 1
        mu_plus real = 1
        mu_minus real = 1
        Wmax real = 100.
        Wmin real = 0.
        
        #parametri per determinare w                   
                                    
        Ca_0 mM = 70*10**(-6) mM                    #calcio intracellulare a riposo,  deve essere sotto a 1uM
        tau_integration ms = 278318 ms
        
        p_rate real = 216.2                  
        d_rate real= 101.5   
        th_p mM = 0.00075 mM                               #######################  !!! da vedere questi treshold, anche unità di miosura
        th_d mM = 0.0005 mM
        tau_syn ms = 70000 ms
        

    equations:
        
        #eq diff per il calcolo di c_stel (c*) a parite da [Ca] (Ca_in)
        c_stel'= - (c_stel / tau_integration) + (Ca_in - Ca_0)
        
        #eq diff per il calcolo di p (ro) a parite da c_stel (c*)
        p'= (-p * (1-p) * (0.5 - p) + p_rate * (1 - p) * Hfun(c_stel - th_p) - d_rate *  p * Hfun(c_stel - th_d))/tau_syn
        p = min(p, Wmax)
        p = max(Wmin,p)
        
        #aggiornamento peso
        w' =  Wmin * p * ( Wmax - Wmin ) - w

    input:
        pre_spikes <- spike
        Ca_in mM<- continous

    output:
        spike

        
    onReceive(pre_spikes):
        print("Info: processing a presynaptic spike at time t = {t}")

        # deliver spike to postsynaptic partner
        deliver_spike(w, d)


    function Hfun(cStel) real:
        if cStel > 0:
            return 1.0
        else:
            return 0.0